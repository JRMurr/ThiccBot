/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Counter {
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "count")]
  count: Option<i32>,
  #[serde(rename = "response")]
  response: Option<String>
}

impl Counter {
  pub fn new() -> Counter {
    Counter {
      name: None,
      count: None,
      response: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> Counter {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> Counter {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_response(&mut self, response: String) {
    self.response = Some(response);
  }

  pub fn with_response(mut self, response: String) -> Counter {
    self.response = Some(response);
    self
  }

  pub fn response(&self) -> Option<&String> {
    self.response.as_ref()
  }

  pub fn reset_response(&mut self) {
    self.response = None;
  }

}



