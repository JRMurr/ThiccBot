/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DiscordServer {
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "command_prefixes")]
  command_prefixes: Option<Vec<String>>,
  #[serde(rename = "message_prefixes")]
  message_prefixes: Option<Vec<String>>,
  #[serde(rename = "server_group_id")]
  server_group_id: Option<i32>,
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "admin_role")]
  admin_role: Option<i32>
}

impl DiscordServer {
  pub fn new() -> DiscordServer {
    DiscordServer {
      name: None,
      command_prefixes: None,
      message_prefixes: None,
      server_group_id: None,
      id: None,
      admin_role: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> DiscordServer {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_command_prefixes(&mut self, command_prefixes: Vec<String>) {
    self.command_prefixes = Some(command_prefixes);
  }

  pub fn with_command_prefixes(mut self, command_prefixes: Vec<String>) -> DiscordServer {
    self.command_prefixes = Some(command_prefixes);
    self
  }

  pub fn command_prefixes(&self) -> Option<&Vec<String>> {
    self.command_prefixes.as_ref()
  }

  pub fn reset_command_prefixes(&mut self) {
    self.command_prefixes = None;
  }

  pub fn set_message_prefixes(&mut self, message_prefixes: Vec<String>) {
    self.message_prefixes = Some(message_prefixes);
  }

  pub fn with_message_prefixes(mut self, message_prefixes: Vec<String>) -> DiscordServer {
    self.message_prefixes = Some(message_prefixes);
    self
  }

  pub fn message_prefixes(&self) -> Option<&Vec<String>> {
    self.message_prefixes.as_ref()
  }

  pub fn reset_message_prefixes(&mut self) {
    self.message_prefixes = None;
  }

  pub fn set_server_group_id(&mut self, server_group_id: i32) {
    self.server_group_id = Some(server_group_id);
  }

  pub fn with_server_group_id(mut self, server_group_id: i32) -> DiscordServer {
    self.server_group_id = Some(server_group_id);
    self
  }

  pub fn server_group_id(&self) -> Option<&i32> {
    self.server_group_id.as_ref()
  }

  pub fn reset_server_group_id(&mut self) {
    self.server_group_id = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> DiscordServer {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_admin_role(&mut self, admin_role: i32) {
    self.admin_role = Some(admin_role);
  }

  pub fn with_admin_role(mut self, admin_role: i32) -> DiscordServer {
    self.admin_role = Some(admin_role);
    self
  }

  pub fn admin_role(&self) -> Option<&i32> {
    self.admin_role.as_ref()
  }

  pub fn reset_admin_role(&mut self) {
    self.admin_role = None;
  }

}



