// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function decodeServer(json) {
  return /* record */[
          /* admin_role */Json_decode.field("admin_role", (function (param) {
                  return Json_decode.optional(Json_decode.$$int, param);
                }), json),
          /* command_prefixes */Json_decode.field("command_prefixes", (function (param) {
                  return Json_decode.optional((function (param) {
                                return Json_decode.array(Json_decode.string, param);
                              }), param);
                }), json),
          /* id */Json_decode.field("id", Json_decode.$$int, json),
          /* name */Json_decode.field("name", Json_decode.string, json)
        ];
}

function decodeAllServers(param) {
  return Json_decode.array(decodeServer, param);
}

function getServers(param) {
  return fetch("api/servers").then((function (prim) {
                  return prim.json();
                })).then((function (json) {
                return Promise.resolve(Json_decode.array(decodeServer, json));
              }));
}

var API = /* module */[
  /* decodeServer */decodeServer,
  /* decodeAllServers */decodeAllServers,
  /* getServers */getServers
];

var component = ReasonReact.reducerComponent("FetchExample");

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* ServerFetch */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1];
              if (typeof match === "number") {
                if (match !== 0) {
                  return React.createElement("div", undefined, "An error occurred!");
                } else {
                  return React.createElement("div", undefined, "Poop...");
                }
              } else {
                return React.createElement("div", undefined, React.createElement("h1", undefined, "Servers"), React.createElement("ul", undefined, Belt_Array.map(match[0], (function (server) {
                                      return React.createElement("li", {
                                                  key: server[/* name */3]
                                                }, server[/* name */3], String(server[/* id */2]));
                                    }))));
              }
            }),
          /* initialState */(function (_state) {
              return /* Loading */0;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* Update */Block.__(0, [/* Error */1]);
                } else {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* Loading */0,
                            (function (self) {
                                getServers(/* () */0).then((function (results) {
                                          Curry._1(self[/* send */3], /* ServersFetches */[results]);
                                          return Promise.resolve(/* () */0);
                                        })).catch((function (_err) {
                                        return Promise.resolve(Curry._1(self[/* send */3], /* ServersFailedToFetch */1));
                                      }));
                                return /* () */0;
                              })
                          ]);
                }
              } else {
                return /* Update */Block.__(0, [/* Loaded */[action[0]]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.API = API;
exports.component = component;
exports.make = make;
/* component Not a pure module */
